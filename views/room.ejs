<!DOCTYPE html>
<html>
<head>
    <title>Video Call Room</title>
    <script src="https://unpkg.com/peerjs@1.4.7/dist/peerjs.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        body { 
            font-family: Arial, sans-serif;
            overflow: hidden;
        }
        .container {
            display: grid;
            grid-template-columns: 1fr 300px;
            height: 100vh;
        }
        .main-area {
            display: flex;
            flex-direction: column;
            height: 100vh;
            background: #f0f2f5;
            position: relative;
        }
        .screen-share-container {
            flex: 1;
            background: black;
            display: none;
            position: relative;
        }
        .screen-share-container.active {
            display: block;
        }
        .screen-share-container video {
            width: 100%;
            height: 100%;
            object-fit: contain;
        }
        .video-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            grid-auto-rows: 1fr;
            gap: 1rem;
            padding: 1rem;
            flex: 1;
            width: 100%;
            transition: all 0.3s ease;
        }
        .video-grid.minimized {
            position: absolute;
            bottom: 5rem;
            left: 1rem;
            width: auto;
            max-width: 60%;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            z-index: 10;
            background: rgba(0,0,0,0.5);
            border-radius: 8px;
            padding: 0.5rem;
        }
        .video-container {
            background: black;
            border-radius: 8px;
            overflow: hidden;
            position: relative;
            aspect-ratio: 16 / 9;
        }
        video {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        .controls {
            position: absolute;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            gap: 1rem;
            background: rgba(0,0,0,0.5);
            padding: 1rem;
            border-radius: 8px;
            z-index: 20;
        }
        .control-button {
            background: #2962ff;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 4px;
            color: white;
            cursor: pointer;
        }
        .control-button.active {
            background: #ff2929;
        }
        .chat-container {
            background: white;
            display: flex;
            flex-direction: column;
            border-left: 1px solid #ddd;
            height: 100vh;
        }
        .chat-header {
            padding: 1rem;
            border-bottom: 1px solid #ddd;
            font-weight: bold;
        }
        .chat-messages {
            flex-grow: 1;
            overflow-y: auto;
            padding: 1rem;
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }
        .message {
            padding: 0.5rem;
            border-radius: 4px;
            max-width: 80%;
        }
        .message.received {
            background: #f0f2f5;
            align-self: flex-start;
        }
        .message.sent {
            background: #dcf8c6;
            align-self: flex-end;
        }
        .chat-input-container {
            padding: 1rem;
            border-top: 1px solid #ddd;
            display: flex;
            gap: 0.5rem;
        }
        .chat-input-container input {
            flex: 1;
            padding: 0.5rem;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        .chat-input-container button {
            background: #2962ff;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 4px;
            cursor: pointer;
        }
        .username-display {
            position: absolute;
            bottom: 10px;
            left: 10px;
            color: white;
            background: rgba(0,0,0,0.5);
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            font-size: 14px;
        }
        .participants-count {
            position: absolute;
            top: 10px;
            right: 10px;
            background: rgba(0,0,0,0.5);
            color: white;
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            font-size: 14px;
            z-index: 5;
        }
        .screenshare-label {
            position: absolute;
            top: 10px;
            left: 10px;
            background: rgba(255,0,0,0.7);
            color: white;
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            font-size: 14px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="main-area">
            <div class="participants-count">Participants: <span id="participant-count">1</span></div>
            <div class="screen-share-container" id="screen-share-container">
                <video id="screen-share-video"></video>
                <div class="screenshare-label">Screen Share: <span id="screen-share-user">You</span></div>
            </div>
            <div class="video-grid" id="video-grid"></div>
        </div>
        <div class="chat-container">
            <div class="chat-header">Chat</div>
            <div class="chat-messages" id="chat-messages"></div>
            <div class="chat-input-container">
                <input type="text" id="chat-input" placeholder="Type a message...">
                <button id="send-button">Send</button>
            </div>
        </div>
    </div>

    <div class="controls">
        <button class="control-button" id="video-toggle">Video Off</button>
        <button class="control-button" id="audio-toggle">Mute</button>
        <button class="control-button" id="screen-share">Share Screen</button>
    </div>

    <script>
        const ROOM_ID = '<%= roomId %>';
        const username = new URLSearchParams(window.location.search).get('username') || 'Anonymous';
        const socket = io('/');
        
        // Use the server's peer path and port configuration
        const peer = new Peer(undefined, {
            host: window.location.hostname,
            port: window.location.port,
            path: '/peerjs',
            secure: window.location.protocol === 'https:'
        });

        const videoGrid = document.getElementById('video-grid');
        const screenShareContainer = document.getElementById('screen-share-container');
        const screenShareVideo = document.getElementById('screen-share-video');
        const screenShareUser = document.getElementById('screen-share-user');
        const participantCount = document.getElementById('participant-count');
        const myVideo = document.createElement('video');
        myVideo.muted = true;
        
        const peers = {};
        let myVideoStream;
        let screenStream;
        let participantsNumber = 1;
        let myPeerId;
        let isScreenSharing = false;
        let currentScreenSharer = null;

        // Get user media
        navigator.mediaDevices.getUserMedia({
            video: true,
            audio: true
        }).then(stream => {
            myVideoStream = stream;
            addVideoStream(myVideo, stream, 'You');

            // Answer calls from other users
            peer.on('call', call => {
                call.answer(stream);
                const video = document.createElement('video');
                
                call.on('stream', userVideoStream => {
                    // Check if this is a screen share stream
                    if (call.metadata && call.metadata.screenShare) {
                        handleIncomingScreenShare(userVideoStream, call.metadata.username);
                    } else {
                        addVideoStream(video, userVideoStream, call.metadata?.username || 'User');
                    }
                });
            });

            socket.on('user-connected', (userId, userName) => {
                connectToNewUser(userId, stream, userName);
                updateParticipantCount(1);
            });
            
            socket.on('user-screen-sharing', (userId) => {
                currentScreenSharer = userId;
                minimizeVideoGrid();
            });
            
            socket.on('user-stopped-screen-sharing', () => {
                currentScreenSharer = null;
                maximizeVideoGrid();
            });
        }).catch(err => {
            console.error('Failed to get media stream:', err);
            alert('Failed to access camera/microphone. Please check permissions.');
        });

        // Connect to peer server
        peer.on('open', id => {
            myPeerId = id;
            socket.emit('join-room', ROOM_ID, id, username);
        });

        // Handle user disconnect
        socket.on('user-disconnected', (userId, userName) => {
            if (peers[userId]) {
                peers[userId].close();
                delete peers[userId];
                updateParticipantCount(-1);
            }
            
            // If the disconnected user was sharing screen
            if (currentScreenSharer === userId) {
                currentScreenSharer = null;
                maximizeVideoGrid();
            }
        });

        // Connect to new user
        function connectToNewUser(userId, stream, userName) {
            const call = peer.call(userId, stream, { metadata: { username: username } });
            const video = document.createElement('video');
            
            call.on('stream', userVideoStream => {
                addVideoStream(video, userVideoStream, userName);
            });
            
            call.on('close', () => {
                video.parentElement.remove();
            });

            peers[userId] = call;
        }

        // Add video stream to grid
        function addVideoStream(video, stream, userName) {
            video.srcObject = stream;
            video.addEventListener('loadedmetadata', () => {
                video.play();
            });
            
            const container = document.createElement('div');
            container.className = 'video-container';
            container.appendChild(video);
            
            const userNameDisplay = document.createElement('div');
            userNameDisplay.className = 'username-display';
            userNameDisplay.textContent = userName;
            container.appendChild(userNameDisplay);
            
            videoGrid.append(container);
        }

        // Handle incoming screen share
        function handleIncomingScreenShare(stream, userName) {
            screenShareVideo.srcObject = stream;
            screenShareUser.textContent = userName;
            screenShareContainer.classList.add('active');
            minimizeVideoGrid();
        }

        // Minimize video grid (when screen sharing is active)
        function minimizeVideoGrid() {
            videoGrid.classList.add('minimized');
            screenShareContainer.classList.add('active');
        }

        // Maximize video grid (when screen sharing ends)
        function maximizeVideoGrid() {
            videoGrid.classList.remove('minimized');
            screenShareContainer.classList.remove('active');
            screenShareVideo.srcObject = null;
        }

        // Update participant count
        function updateParticipantCount(change) {
            participantsNumber += change;
            participantCount.textContent = participantsNumber;
        }

        // CHAT FUNCTIONALITY
        const chatInput = document.getElementById('chat-input');
        const sendButton = document.getElementById('send-button');
        const chatMessages = document.getElementById('chat-messages');

        function sendMessage() {
            if (chatInput.value.trim() === '') return;
            
            // Add message to local chat
            addMessageToChat(chatInput.value, username, true);
            
            // Send message to other users
            socket.emit('send-message', chatInput.value, username);
            
            // Clear input
            chatInput.value = '';
        }

        chatInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });

        sendButton.addEventListener('click', () => {
            sendMessage();
        });

        // Receive messages from server
        socket.on('receive-message', (message, userName) => {
            addMessageToChat(message, userName, userName === username);
        });

        // Add message to chat container
        function addMessageToChat(message, sender, isSelf) {
            const messageElement = document.createElement('div');
            messageElement.className = `message ${isSelf ? 'sent' : 'received'}`;
            
            if (!isSelf) {
                messageElement.innerHTML = `<strong>${sender}</strong><br>${message}`;
            } else {
                messageElement.textContent = message;
            }
            
            chatMessages.appendChild(messageElement);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        // CONTROLS
        document.getElementById('video-toggle').addEventListener('click', () => {
            const videoBtn = document.getElementById('video-toggle');
            const enabled = myVideoStream.getVideoTracks()[0].enabled;
            
            if (enabled) {
                myVideoStream.getVideoTracks()[0].enabled = false;
                videoBtn.textContent = 'Video On';
                videoBtn.classList.add('active');
            } else {
                myVideoStream.getVideoTracks()[0].enabled = true;
                videoBtn.textContent = 'Video Off';
                videoBtn.classList.remove('active');
            }
        });

        document.getElementById('audio-toggle').addEventListener('click', () => {
            const audioBtn = document.getElementById('audio-toggle');
            const enabled = myVideoStream.getAudioTracks()[0].enabled;
            
            if (enabled) {
                myVideoStream.getAudioTracks()[0].enabled = false;
                audioBtn.textContent = 'Unmute';
                audioBtn.classList.add('active');
            } else {
                myVideoStream.getAudioTracks()[0].enabled = true;
                audioBtn.textContent = 'Mute';
                audioBtn.classList.remove('active');
            }
        });

        document.getElementById('screen-share').addEventListener('click', async () => {
            const screenBtn = document.getElementById('screen-share');
            
            if (!isScreenSharing) {
                try {
                    screenStream = await navigator.mediaDevices.getDisplayMedia({
                        video: true
                    });
                    
                    // Display screen in main container
                    screenShareVideo.srcObject = screenStream;
                    screenShareUser.textContent = 'You';
                    
                    // Share screen with peers
                    Object.values(peers).forEach(currentPeer => {
                        // Create a new call specifically for screen sharing
                        const call = peer.call(currentPeer.peer, screenStream, {
                            metadata: { 
                                screenShare: true,
                                username: username
                            }
                        });
                    });
                    
                    // Notify others that we're screen sharing
                    socket.emit('screen-sharing-started', myPeerId);
                    
                    // Update UI
                    minimizeVideoGrid();
                    screenBtn.textContent = 'Stop Sharing';
                    screenBtn.classList.add('active');
                    isScreenSharing = true;
                    currentScreenSharer = myPeerId;
                    
                    // Handle screen share ending
                    screenStream.getVideoTracks()[0].onended = () => {
                        stopScreenSharing();
                    };
                } catch (e) {
                    console.error('Error sharing screen:', e);
                    alert('Failed to share screen. Please try again.');
                }
            } else {
                stopScreenSharing();
            }
        });

        function stopScreenSharing() {
            if (screenStream) {
                screenStream.getTracks().forEach(track => track.stop());
                
                // Update UI
                maximizeVideoGrid();
                document.getElementById('screen-share').textContent = 'Share Screen';
                document.getElementById('screen-share').classList.remove('active');
                
                // Notify others that we've stopped screen sharing
                socket.emit('screen-sharing-stopped');
                
                isScreenSharing = false;
                currentScreenSharer = null;
                screenStream = null;
            }
        }
    </script>
</body>
</html>